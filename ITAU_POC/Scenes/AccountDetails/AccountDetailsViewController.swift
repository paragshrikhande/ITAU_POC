//
//  AccountDetailsViewController.swift
//  ITAU_POC
//
//  Created by Parag on 11/11/19.
//  Copyright (c) 2019 Parag. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AccountDetailsDisplayLogic: class {
    func displayUserDetail(viewModel: AccountDetails.AccountData.ViewModel)
    func displayAccountStatementList(viewModel: AccountDetails.StatementDetails.ViewModel)
    func showNetworkError()
    func startLoaderActivity()
    func stopLoaderActivity()
}

class AccountDetailsViewController: UIViewController {
    
    //Cuatomer Details View
    @IBOutlet weak var customerDetailsView: UIView!
    @IBOutlet weak var lblCustomerName: UILabel!
    @IBOutlet weak var lblConta: UILabel!
    @IBOutlet weak var lblAccountNumber: UILabel!
    @IBOutlet weak var lblSaldo: UILabel!
    @IBOutlet weak var lblAccountBalance: UILabel!
    @IBOutlet weak var btnLogout: UIButton!
    @IBOutlet weak var loaderViewBG: UIView!
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!
    
    //Account Details View
    @IBOutlet weak var accountDetailsTableView: UITableView!
    
    var interactor: AccountDetailsBusinessLogic?
    var router: (NSObjectProtocol & AccountDetailsRoutingLogic & AccountDetailsDataPassing)?
    var statements: [StatementList] = []
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    /// Basic Clean Architecture Setup
    private func setup() {
        let viewController = self
        let interactor = AccountDetailsInteractor()
        let presenter = AccountDetailsPresenter()
        let router = AccountDetailsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Configure UI
    /// Configure Basic UI
    private func configureUI() {
        btnLogout.setImage(UIImage(named: "logout"), for: .normal)
        lblConta.text = NSLocalizedString("txt_Conta", comment: "")
        lblSaldo.text = NSLocalizedString("txt_Saldo", comment: "")
        
        loaderViewBG.isHidden = true
    }
    
    /// Button Action Log Out
    /// - Parameter sender: Sender Logout
    @IBAction func btnLogoutAction(_ sender: Any) {
           performSegue(withIdentifier: "Logout", sender: nil)
       }
    
    // MARK: Routing
    /// Default method used for Segue
    /// - Parameters:
    ///   - segue: Segure name
    ///   - sender: Any
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        configureUI()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true)
        fetchUserDetails()
        getAccountDetails()
    }
    
    // MARK: Retrieve Account and User Details
    /// Fetch Logged In User DEtails
    private func fetchUserDetails() {
        interactor?.getUserData()
    }
    
    /// Get Statement Details
    private func getAccountDetails() {
        let request = AccountDetails.StatementDetails.Request()
        interactor?.getStatementList(request: request)
    }
}

extension AccountDetailsViewController : AccountDetailsDisplayLogic {
    /// Display User Account Detials
    /// - Parameter viewModel: Account Data Model
    func displayUserDetail(viewModel: AccountDetails.AccountData.ViewModel) {
        let accountDetails : UserAccount = viewModel.accountDetails
        lblCustomerName.text = accountDetails.name
        lblAccountNumber.text = accountDetails.bankAccount
        lblAccountBalance.text = String(format: "R$%.3f", accountDetails.balance ?? 0.0)
    }
    
    /// Display Statement Details
    /// - Parameter viewModel: Statement Detials Model
    func displayAccountStatementList(viewModel: AccountDetails.StatementDetails.ViewModel) {
        if let statementList = viewModel.statements {
            statements = statementList
            accountDetailsTableView.reloadData()
        }
        stopLoaderActivity()
    }
    
    /// Network error to check data connectivity
    func showNetworkError() {
        let txtAlertError = NSLocalizedString("txt_ErrorAlert", comment: "")
        let txtAlertMessage = NSLocalizedString("txt_NetworkError", comment: "")
        self.showAlertMessage(titleString: txtAlertError, messageString: txtAlertMessage)
    }
    
    // MARK: - Loader Methods
    /// Start Loading
    func startLoaderActivity() {
        loaderViewBG.isHidden = false
        activityIndicator.isHidden = false
        DispatchQueue.main.async {
            self.activityIndicator.startAnimating()
        }
    }
    
    /// Stop Loadind
    func stopLoaderActivity() {
        DispatchQueue.main.async {
            self.activityIndicator.stopAnimating()
            self.loaderViewBG.isHidden = true
        }
    }
}

// MARK: - TableView Delegates and Datasource
extension AccountDetailsViewController : UITableViewDelegate, UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        return NSLocalizedString("txt_Recentes", comment: "")
    }
    
    func tableView(_ tableView: UITableView, willDisplayHeaderView view: UIView, forSection section: Int) {
        let header = view as! UITableViewHeaderFooterView
        header.textLabel?.font = UIFont(name: "Helvetica Neue", size: 17)!
        header.textLabel?.textColor = UIColor(red: 72/255, green: 84/255, blue: 101/255, alpha: 1)
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return statements.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let statementRecord = statements[indexPath.row]
        
        var cell = tableView.dequeueReusableCell(withIdentifier: "AccountDetailsTableViewCell") as? AccountDetailsTableViewCell
        if cell == nil {
            cell = UITableViewCell(style: .value1, reuseIdentifier: "AccountDetailsTableViewCell") as? AccountDetailsTableViewCell
        }
        cell?.lblTitleLabel.text = statementRecord.title
        cell?.lblDescription.text = statementRecord.desc
        cell?.lblAmountDetails.text = String(format: "R$%.3f", statementRecord.value ?? 0.0)
        cell?.lblTrasactionDate.text = statementRecord.date
        return cell!
    }
}
