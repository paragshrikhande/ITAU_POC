//
//  AccountDetailsInteractor.swift
//  ITAU_POC
//
//  Created by Parag on 11/11/19.
//  Copyright (c) 2019 Parag. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AccountDetailsBusinessLogic {
    func getUserData()
    func getStatementList(request: AccountDetails.StatementDetails.Request)
}

protocol AccountDetailsDataStore {
    var userDetails: UserAccount? { get set }
}

class AccountDetailsInteractor: AccountDetailsDataStore {
    var presenter: AccountDetailsPresentationLogic?
    var worker = AccountDetailsWorker()
    var userDetails: UserAccount?
    
}

extension AccountDetailsInteractor : AccountDetailsBusinessLogic {
    /// Get Logged In User Data
    func getUserData() {
        if let userAccountDetails = userDetails {
            let response = AccountDetails.AccountData.Response(accountDetails: userAccountDetails)
            presenter?.presentAccountDetails(response: response)
        }
    }
    
    /// Get Account Statement List
    /// - Parameter request: Statement Detials request
    func getStatementList(request: AccountDetails.StatementDetails.Request) {
        guard let userId = UserDataStore.shared.getLoggedInUserId()
            else {
                return
        }
        guard let urlString = URL(string: ServiceConstants.BaseURL + ServiceConstants.UrlCollection.StatementUrl.statements + userId)
            else {
                return
        }
        presenter?.presentStartLoaderActivity()
        if Reachability.isConnectedToNetwork() == true {
            worker.getStatementDetails(urlString: urlString, completion: { [weak self] (success, response, error) in
                if(success) {
                    if let responseData = response {
                        if responseData.statementList.count != 0 {
                            self?.presenter?.presentStatementDetails(response: AccountDetails.StatementDetails.Response(statements: responseData.statementList))
                        }
                    }
                }
                else {
                    self?.presenter?.presentStopLoaderActivity()
                }
            })
        }
        else {
            presenter?.presentNetworkError()
        }
    }
}
