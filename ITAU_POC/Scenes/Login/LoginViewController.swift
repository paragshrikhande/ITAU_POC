//
//  LoginViewController.swift
//  ITAU_POC
//
//  Created by Parag on 11/11/19.
//  Copyright (c) 2019 Parag. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: class {
    func displayAccountDetailsDetails(viewModel: Login.LoginModel.ViewModel)
    func displayLoggedInUserDetails(request: Login.LoginModel.Request)
    func startLoaderActivity()
    func stopLoaderActivity()
}

class LoginViewController: UIViewController, LoginDisplayLogic
{
    @IBOutlet weak var txtUserName: UITextField!
    @IBOutlet weak var txtPassword: UITextField!
    @IBOutlet weak var imgLogo: UIImageView!
    @IBOutlet weak var btnLogin: UIButton!
    @IBOutlet weak var lblInputError: UILabel!
    
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!
    @IBOutlet weak var loaderViewBG: UIView!
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        configureUI()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true)
        resetUI()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    @IBAction func btnLoginAction(_ sender: Any) {
        if validateUserName() == true && validatePassword() == true {
            lblInputError.text = ""
            loginUser()
        }
    }
    
    func loginUser() {
        guard let user = txtUserName.text else{
            return
        }
        guard let password = txtPassword.text else{
            return
        }
        let request = Login.LoginModel.Request(loginInfo: LoginInfo(user: user, password: password))
        interactor?.loginUser(request: request)
    }
    
    func displayAccountDetailsDetails(viewModel: Login.LoginModel.ViewModel) {
        //lblInputError.text = "Success"
        stopLoaderActivity()
        performSegue(withIdentifier: "AccountDetails", sender: nil)
    }
    
    func displayLoggedInUserDetails(request: Login.LoginModel.Request) {
        txtUserName.text = request.loginInfo?.user
    }
    
    private func configureUI() {
        btnLogin.layer.cornerRadius = 5
        btnLogin.layer.borderWidth = 1
        txtPassword.isSecureTextEntry = true
        loaderViewBG.isHidden = true
        
        btnLogin.titleLabel?.text = AppConstant.txtLogin
        txtUserName.placeholder = AppConstant.txtUserPlaceholder
        txtPassword.placeholder = AppConstant.txtPasswordPlaceHolder
    }
    
    private func resetUI () {
        txtUserName.text = ""
        txtPassword.text = ""
        lblInputError.text = ""
        
        interactor?.getUserDetails()
    }
    
    @IBAction func unwindToLoginViewController(_ unwindSegue: UIStoryboardSegue) {
    }
    
    // MARK: - Loader Methods
    // Loader - Start Load
    func startLoaderActivity() {
        loaderViewBG.isHidden = false
        activityIndicator.isHidden = false
        DispatchQueue.main.async {
            self.activityIndicator.startAnimating()
        }
    }
    
    func stopLoaderActivity() {
        DispatchQueue.main.async {
            self.activityIndicator.stopAnimating()
            self.loaderViewBG.isHidden = true
        }
    }
}

//Text Field Delegare
extension LoginViewController : UITextFieldDelegate {
    func textFieldDidBeginEditing(_ textField: UITextField) {
        lblInputError.isHidden = true
    }
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        if textField == txtUserName{
            textField.resignFirstResponder()
            txtPassword.becomeFirstResponder()
        }
        else {
            textField.resignFirstResponder()
        }
        return true
    }
}

//Input Validation
extension LoginViewController {
    func validateUserName() -> Bool {
        var isValidInput : Bool = true
        do {
            let _ = try txtUserName.validatedText(validationType: ValidatorType.username)
        } catch(let error) {
            isValidInput = false
            errorText(errorMessage: (error as! ValidationError).message)
        }
        return isValidInput
    }
    
    func validatePassword() -> Bool  {
        var isValidInput : Bool = true
        do {
            let _ = try txtPassword.validatedText(validationType: ValidatorType.password)
        } catch(let error) {
            isValidInput = false
            errorText(errorMessage: (error as! ValidationError).message)
        }
        return isValidInput
    }
    
    fileprivate func errorText(errorMessage: String) {
        lblInputError.isHidden = false
        lblInputError.text = errorMessage
    }
}
